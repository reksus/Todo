{"version":3,"sources":["Input/TextInput.js","Button/Button.js","TodoManager/Todo/Todo.js","TodoManager/todoManager.js","App.js","serviceWorker.js","index.js"],"names":["textInput","props","className","type","value","placeholder","onChange","e","button","onClick","children","todo","task","isComplete","onDelete","taskClasses","push","target","checked","join","Button","TodoManager","state","newTask","todoItems","handleChange","setState","console","log","idx","some","i","splice","this","slice","todos","TextInput","addTask","map","Todo","key","handleCheckbox","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3c276968.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction textInput(props) {\r\n  return (\r\n    <input \r\n      className=\"input text-input\" \r\n      type=\"text\" \r\n      value={props.value} \r\n      placeholder=\"New Task\"\r\n      onChange={(e) => props.onChange(e)}\r\n    />\r\n  )\r\n}\r\n\r\nexport default textInput","import React from 'react'\r\n\r\nfunction button(props) {\r\n  return (\r\n    <button \r\n      className=\"btn btn-add\"\r\n      onClick={props.onClick}\r\n    >\r\n      {props.children}\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default button","import React from 'react';\r\nimport Button from '../../Button/Button';\r\n\r\nfunction todo({task, isComplete, onClick, onDelete}) {\r\n  const taskClasses = ['task']\r\n  if (isComplete) {\r\n    taskClasses.push('complete')\r\n  }\r\n  return (\r\n    <div className=\"todo\">\r\n      <input \r\n        type=\"checkbox\" \r\n        onClick={(e) => onClick(task, e.target.checked)}  \r\n      />\r\n      <span className={taskClasses.join(' ')}>{task}</span>\r\n      <Button onClick={() => onDelete(task)}>x</Button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default todo","import React from 'react'\r\nimport TextInput from '../Input/TextInput'\r\nimport Button from '../Button/Button'\r\nimport Todo from './Todo/Todo';\r\n\r\nclass TodoManager extends React.Component {\r\n  state = {\r\n    newTask: '',\r\n    todoItems: [\r\n      {\r\n        task: 'complete task project',\r\n        isComplete: false\r\n      },\r\n      {\r\n        task: 'redo the project using hooks',\r\n        isComplete: false\r\n      },\r\n      {\r\n        task: 'do data structure questions',\r\n        isComplete: false\r\n      },\r\n      {\r\n        task: 'learn a bit of styling',\r\n        isComplete: false\r\n      },\r\n    ]\r\n  }\r\n\r\n  addTask() {\r\n    const newTask = this.state.newTask\r\n    if (!newTask) {\r\n      return\r\n    }\r\n    const todoItems = this.state.todoItems.slice()\r\n    todoItems.push({task: newTask, isComplete: false})\r\n    this.setState({\r\n      newTask: '',\r\n      todoItems: todoItems\r\n    })\r\n  }\r\n  handleChange = (e) => {\r\n    const value = e.target.value\r\n    this.setState({newTask: value})\r\n  }\r\n\r\n  handleCheckbox(task, isComplete) {\r\n    const todoItems = this.state.todoItems\r\n    let idx\r\n    todoItems.some((todo, i) => {\r\n      if (todo.task === task) {\r\n        idx = i\r\n        return true\r\n      }\r\n      return false\r\n    })\r\n    todoItems[idx].isComplete = isComplete\r\n    this.setState({\r\n      todoItems: todoItems\r\n    })\r\n  }\r\n\r\n  onDelete = (task) => {\r\n    console.log(task)\r\n    const todoItems = this.state.todoItems\r\n    let idx\r\n    todoItems.some((todo, i) => {\r\n      if (todo.task === task) {\r\n        idx = i\r\n        return true\r\n      }\r\n      return false\r\n    })\r\n    todoItems.splice(idx, 1)\r\n    this.setState({\r\n      todoItems: todoItems\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const todos = this.state.todoItems\r\n    return (\r\n      <div className=\"todo-manager\">\r\n        <TextInput value={this.state.newTask} onChange={(e) => this.handleChange(e)} />\r\n        <Button onClick={() => this.addTask()}>Add</Button>\r\n        {\r\n          todos.map((todo, i) => \r\n            <Todo \r\n              key={todo.task}\r\n              task={this.state.todoItems[i].task}\r\n              isComplete={this.state.todoItems[i].isComplete}\r\n              onClick={(task, isComplete) => this.handleCheckbox(task, isComplete)}\r\n              onDelete={(task) => this.onDelete(task)}\r\n            >\r\n            </Todo>\r\n          )\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n  \r\n}\r\n\r\n\r\nexport default TodoManager","import React from 'react'\nimport TodoManager from './TodoManager/todoManager'\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoManager />\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}